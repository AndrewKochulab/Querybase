/// <reference path="../typings/firebase/firebase.d.ts" />
var QuerybaseUtils = (function () {
    function QuerybaseUtils() {
    }
    QuerybaseUtils.prototype.isString = function (value) {
        return typeof value === 'string' || value instanceof String;
    };
    QuerybaseUtils.prototype.hasMultipleCriteria = function (criteriaKeys) {
        return criteriaKeys.length > 1;
    };
    QuerybaseUtils.prototype.createKey = function (propOne, propTwo) {
        return propOne + "_" + propTwo;
    };
    QuerybaseUtils.prototype.getPathFromRef = function (ref) {
        var PATH_POSITION = 3;
        var pathArray = ref.toString().split('/');
        return pathArray.slice(PATH_POSITION, pathArray.length).join('/');
    };
    QuerybaseUtils.prototype.merge = function (obj1, obj2) {
        var mergedHash = {};
        for (var prop in obj1) {
            mergedHash[prop] = obj1[prop];
        }
        for (var prop in obj2) {
            mergedHash[prop] = obj2[prop];
        }
        return mergedHash;
    };
    QuerybaseUtils.prototype.keys = function (obj) {
        return Object.keys(obj);
    };
    QuerybaseUtils.prototype.values = function (obj) {
        return Object.keys(obj).map(function (key) { return obj[key]; });
    };
    QuerybaseUtils.prototype.arrayToObject = function (arr) {
        var hash = {};
        arr.forEach(function (item) { return hash[item] = item; });
        return hash;
    };
    QuerybaseUtils.prototype.sortLexicographically = function (prop) {
        return function (a, b) { return a[prop].localeCompare(b[prop]); };
    };
    QuerybaseUtils.prototype.stripKeys = function (obj, keyStrip) {
        if (keyStrip === void 0) { keyStrip = "_"; }
        var copy = Object.create(obj);
        this.keys(copy).forEach(function (key) { if (key.substr(0, 1) === keyStrip) {
            delete copy[key];
        } });
    };
    return QuerybaseUtils;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = QuerybaseUtils;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlF1ZXJ5YmFzZVV0aWxzLnRzIl0sIm5hbWVzIjpbIlF1ZXJ5YmFzZVV0aWxzIiwiUXVlcnliYXNlVXRpbHMuY29uc3RydWN0b3IiLCJRdWVyeWJhc2VVdGlscy5pc1N0cmluZyIsIlF1ZXJ5YmFzZVV0aWxzLmhhc011bHRpcGxlQ3JpdGVyaWEiLCJRdWVyeWJhc2VVdGlscy5jcmVhdGVLZXkiLCJRdWVyeWJhc2VVdGlscy5nZXRQYXRoRnJvbVJlZiIsIlF1ZXJ5YmFzZVV0aWxzLm1lcmdlIiwiUXVlcnliYXNlVXRpbHMua2V5cyIsIlF1ZXJ5YmFzZVV0aWxzLnZhbHVlcyIsIlF1ZXJ5YmFzZVV0aWxzLmFycmF5VG9PYmplY3QiLCJRdWVyeWJhc2VVdGlscy5zb3J0TGV4aWNvZ3JhcGhpY2FsbHkiLCJRdWVyeWJhc2VVdGlscy5zdHJpcEtleXMiXSwibWFwcGluZ3MiOiJBQUFBLDBEQUEwRDtBQUUxRDtJQUFBQTtJQXNEQUMsQ0FBQ0E7SUFwRENELGlDQUFRQSxHQUFSQSxVQUFTQSxLQUFLQTtRQUNaRSxNQUFNQSxDQUFDQSxPQUFPQSxLQUFLQSxLQUFLQSxRQUFRQSxJQUFJQSxLQUFLQSxZQUFZQSxNQUFNQSxDQUFDQTtJQUM5REEsQ0FBQ0E7SUFFREYsNENBQW1CQSxHQUFuQkEsVUFBb0JBLFlBQVlBO1FBQzlCRyxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFFREgsa0NBQVNBLEdBQVRBLFVBQVVBLE9BQU9BLEVBQUVBLE9BQU9BO1FBQ3hCSSxNQUFNQSxDQUFJQSxPQUFPQSxTQUFJQSxPQUFTQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFFREosdUNBQWNBLEdBQWRBLFVBQWVBLEdBQUdBO1FBQ2hCSyxJQUFNQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsU0FBU0EsR0FBR0EsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FB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WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9maXJlYmFzZS9maXJlYmFzZS5kLnRzXCIgLz5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlcnliYXNlVXRpbHMge1xuICBcbiAgaXNTdHJpbmcodmFsdWUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbiAgfVxuICBcbiAgaGFzTXVsdGlwbGVDcml0ZXJpYShjcml0ZXJpYUtleXMpIHtcbiAgICByZXR1cm4gY3JpdGVyaWFLZXlzLmxlbmd0aCA+IDE7XG4gIH1cbiAgXG4gIGNyZWF0ZUtleShwcm9wT25lLCBwcm9wVHdvKSB7XG4gICAgcmV0dXJuIGAke3Byb3BPbmV9XyR7cHJvcFR3b31gO1xuICB9XG4gIFxuICBnZXRQYXRoRnJvbVJlZihyZWYpOiBzdHJpbmcge1xuICAgIGNvbnN0IFBBVEhfUE9TSVRJT04gPSAzO1xuICAgIHZhciBwYXRoQXJyYXkgPSByZWYudG9TdHJpbmcoKS5zcGxpdCgnLycpO1xuICAgIHJldHVybiBwYXRoQXJyYXkuc2xpY2UoUEFUSF9QT1NJVElPTiwgcGF0aEFycmF5Lmxlbmd0aCkuam9pbignLycpO1xuICB9ICBcbiAgXG4gIG1lcmdlKG9iajEsIG9iajIpIHtcbiAgICB2YXIgbWVyZ2VkSGFzaCA9IHt9O1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqMSkgeyBcbiAgICAgIG1lcmdlZEhhc2hbcHJvcF0gPSBvYmoxW3Byb3BdOyBcbiAgICB9XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmoyKSB7IFxuICAgICAgbWVyZ2VkSGFzaFtwcm9wXSA9IG9iajJbcHJvcF07IFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkSGFzaDtcbiAgfVxuICBcbiAga2V5cyhvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKTtcbiAgfVxuICBcbiAgdmFsdWVzKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrZXkgPT4geyByZXR1cm4gb2JqW2tleV07IH0pO1xuICB9XG4gIFxuICBhcnJheVRvT2JqZWN0KGFycjogYW55W10pIHtcbiAgICB2YXIgaGFzaCA9IHt9O1xuICAgIGFyci5mb3JFYWNoKChpdGVtKSA9PiBoYXNoW2l0ZW1dID0gaXRlbSk7XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbiAgXG4gIHNvcnRMZXhpY29ncmFwaGljYWxseShwcm9wKSB7XG4gICByZXR1cm4gKGEsYikgPT4geyByZXR1cm4gYVtwcm9wXS5sb2NhbGVDb21wYXJlKGJbcHJvcF0pOyB9O1xuICB9XG4gIFxuICBzdHJpcEtleXMob2JqLCBrZXlTdHJpcCA9IFwiX1wiKSB7XG4gICAgdmFyIGNvcHkgPSBPYmplY3QuY3JlYXRlKG9iaik7XG4gICAgdGhpcy5rZXlzKGNvcHkpLmZvckVhY2goKGtleSkgPT4geyBpZiAoa2V5LnN1YnN0cigwLCAxKSA9PT0ga2V5U3RyaXApIHsgZGVsZXRlIGNvcHlba2V5XSB9IH0pO1xuICB9XG4gIFxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
