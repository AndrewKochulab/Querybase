{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/Querybase.ts","Querybase.js","src/QuerybaseQuery.ts","src/QuerybaseUtils.ts","src/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","QuerybaseUtils_1","QuerybaseQuery_1","Querybase","ref","indexOn","_this","this","_","key","indexes","_createIndexes","arrayToObject","_warnAboutIndexOnRule","prototype","set","data","dataWithIndex","_indexData","update","push","remove","onDisconnect","child","path","where","criteria","isString","orderByChild","keys","values","hasMultipleCriteria","criteriaIndex","join","criteriaValues","equalTo","properties","indexHash","propCop","slice","mainProp","shift","forEach","prop","propString","valueString","createKey","subProp","_addIndexToData","_indexOn","merged","merge","obj","indexKeys","_indexOnRule","getPathFromRef","map","console","warn","Object","defineProperty","value","./QuerybaseQuery","./QuerybaseUtils",2,"QuerybaseQuery","query","lessThan","endAt","greaterThan","startAt",3,"QuerybaseUtils","String","criteriaKeys","propOne","propTwo","PATH_POSITION","pathArray","toString","split","obj1","obj2","mergedHash","arr","hash","item","sortLexicographically","b","localeCompare","stripKeys","keyStrip","copy","create","substr",4,"Querybase_1","window","./Querybase"],"mappings":"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","file":"Querybase.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/// <reference path=\"../typings/firebase/firebase.d.ts\" />\n\nimport QuerybaseUtils from \"./QuerybaseUtils\";\nimport QuerybaseQuery from \"./QuerybaseQuery\";\n\nexport default class Querybase {\n  \n  ref: () => Firebase;\n  indexOn: () => string[];\n  key: () => string;\n  \n  private _: QuerybaseUtils;\n  \n  constructor(ref: Firebase, indexOn: string[]) {\n    this._ = new QuerybaseUtils();\n    this.ref = () => { return ref; }\n    this.indexOn = () => { return indexOn };\n    this.key = () => { return this.ref().key() };\n    \n    const indexes = this._createIndexes(indexOn, this._.arrayToObject(indexOn));\n    this._warnAboutIndexOnRule(indexes);\n  }\n  \n  set(data) {\n    const dataWithIndex = this._indexData(this.indexOn(), data);\n    this.ref().set(dataWithIndex);\n  }\n\n  update(data) {\n    const dataWithIndex = this._indexData(this.indexOn(), data);\n    this.ref().update(dataWithIndex);\n  }\n\n  push(data) {\n    if (!data) { return this.ref().push() }\n    const dataWithIndex = this._indexData(this.indexOn(), data);\n    this.ref().push(dataWithIndex);\n  }\n  \n  remove() {\n    return this.ref().remove();\n  }\n  \n  onDisconnect() {\n    return this.ref().onDisconnect();\n  }\n  \n  child(path, indexOn?: string[]) {\n    return new Querybase(this.ref().child(path), indexOn || this.indexOn());\n  }\n  \n  where(criteria): any {\n    \n    if (this._.isString(criteria)) {\n      return new QuerybaseQuery(this.ref().orderByChild(criteria));\n    } \n    \n    const keys = this._.keys(criteria);\n    const values = this._.values(criteria);\n    \n    // multiple criteria\n    if (this._.hasMultipleCriteria(keys)) {\n      \n      //TODO: refactor _ \n      const criteriaIndex = \"_\" + keys.join('_');\n      const criteriaValues = values.join('_');\n      \n      return this.ref().orderByChild(criteriaIndex).equalTo(criteriaValues); \n    }\n    \n    // single criteria \n    return this.ref().orderByChild(keys[0]).equalTo(values[0]);\n  }\n  \n  private _createIndexes(properties: any[], data: any, indexHash?: any) {\n    // create a copy of the array to not modifiy the original properties\n    const propCop = properties.slice();\n    // remove the first property, this ensures no redundant keys are created (age_name vs. name_age)\n    const mainProp = propCop.shift()\n    // recursive check for the indexHash\n    indexHash = indexHash || {};\n\n    propCop.forEach((prop) => {\n      var propString = \"\";\n      var valueString = \"\";\n      \n      // first level keys\n      indexHash[\"_\" + this._.createKey(mainProp, prop)] = this._.createKey(data[mainProp], data[prop]);\n\n      // create indexes for all property combinations\n      propCop.forEach((subProp) => {\n        propString = this._.createKey(propString, subProp);\n        valueString = this._.createKey(valueString, data[subProp]);\n      });\n      \n      indexHash[\"_\" + mainProp + propString] = data[mainProp] + valueString;\n      \n    });\n\n    if (propCop.length !== 0) {\n      this._createIndexes(propCop, data, indexHash);\n    }\n\n    return indexHash;\n  }\n  \n  private _addIndexToData(_indexOn, data) {\n    const indexes = this._createIndexes(_indexOn, data);\n    const merged = this._.merge(data, indexes);\n    return merged;\n  }\n  \n  private _indexData(_indexOn, data) {\n    const indexes = this._createIndexes(_indexOn, data);\n    const merged = this._.merge(data, indexes);\n    return merged;\n  }\n  \n  private _warnAboutIndexOnRule(obj) {\n    const indexKeys = this._.merge(obj, this._.arrayToObject(this.indexOn()));\n    const _indexOnRule =  `\n\"${this._.getPathFromRef(this.ref())}\": {\n  \"._indexOn\": [${this._.keys(indexKeys).map((key) => { return `\"${key}\"`; }).join(\", \")}]\n}`;\n    console.warn(`Add this rule to drastically improve performance of your Firebase queries: \\n ${_indexOnRule}`);\n  }\n\n}","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/// <reference path=\"../typings/firebase/firebase.d.ts\" />\nvar QuerybaseUtils_1 = require(\"./QuerybaseUtils\");\nvar QuerybaseQuery_1 = require(\"./QuerybaseQuery\");\nvar Querybase = (function () {\n    function Querybase(ref, indexOn) {\n        var _this = this;\n        this._ = new QuerybaseUtils_1.default();\n        this.ref = function () { return ref; };\n        this.indexOn = function () { return indexOn; };\n        this.key = function () { return _this.ref().key(); };\n        var indexes = this._createIndexes(indexOn, this._.arrayToObject(indexOn));\n        this._warnAboutIndexOnRule(indexes);\n    }\n    Querybase.prototype.set = function (data) {\n        var dataWithIndex = this._indexData(this.indexOn(), data);\n        this.ref().set(dataWithIndex);\n    };\n    Querybase.prototype.update = function (data) {\n        var dataWithIndex = this._indexData(this.indexOn(), data);\n        this.ref().update(dataWithIndex);\n    };\n    Querybase.prototype.push = function (data) {\n        if (!data) {\n            return this.ref().push();\n        }\n        var dataWithIndex = this._indexData(this.indexOn(), data);\n        this.ref().push(dataWithIndex);\n    };\n    Querybase.prototype.remove = function () {\n        return this.ref().remove();\n    };\n    Querybase.prototype.onDisconnect = function () {\n        return this.ref().onDisconnect();\n    };\n    Querybase.prototype.child = function (path, indexOn) {\n        return new Querybase(this.ref().child(path), indexOn || this.indexOn());\n    };\n    Querybase.prototype.where = function (criteria) {\n        if (this._.isString(criteria)) {\n            return new QuerybaseQuery_1.default(this.ref().orderByChild(criteria));\n        }\n        var keys = this._.keys(criteria);\n        var values = this._.values(criteria);\n        // multiple criteria\n        if (this._.hasMultipleCriteria(keys)) {\n            //TODO: refactor _ \n            var criteriaIndex = \"_\" + keys.join('_');\n            var criteriaValues = values.join('_');\n            return this.ref().orderByChild(criteriaIndex).equalTo(criteriaValues);\n        }\n        // single criteria \n        return this.ref().orderByChild(keys[0]).equalTo(values[0]);\n    };\n    Querybase.prototype._createIndexes = function (properties, data, indexHash) {\n        var _this = this;\n        // create a copy of the array to not modifiy the original properties\n        var propCop = properties.slice();\n        // remove the first property, this ensures no redundant keys are created (age_name vs. name_age)\n        var mainProp = propCop.shift();\n        // recursive check for the indexHash\n        indexHash = indexHash || {};\n        propCop.forEach(function (prop) {\n            var propString = \"\";\n            var valueString = \"\";\n            // first level keys\n            indexHash[\"_\" + _this._.createKey(mainProp, prop)] = _this._.createKey(data[mainProp], data[prop]);\n            // create indexes for all property combinations\n            propCop.forEach(function (subProp) {\n                propString = _this._.createKey(propString, subProp);\n                valueString = _this._.createKey(valueString, data[subProp]);\n            });\n            indexHash[\"_\" + mainProp + propString] = data[mainProp] + valueString;\n        });\n        if (propCop.length !== 0) {\n            this._createIndexes(propCop, data, indexHash);\n        }\n        return indexHash;\n    };\n    Querybase.prototype._addIndexToData = function (_indexOn, data) {\n        var indexes = this._createIndexes(_indexOn, data);\n        var merged = this._.merge(data, indexes);\n        return merged;\n    };\n    Querybase.prototype._indexData = function (_indexOn, data) {\n        var indexes = this._createIndexes(_indexOn, data);\n        var merged = this._.merge(data, indexes);\n        return merged;\n    };\n    Querybase.prototype._warnAboutIndexOnRule = function (obj) {\n        var indexKeys = this._.merge(obj, this._.arrayToObject(this.indexOn()));\n        var _indexOnRule = \"\\n\\\"\" + this._.getPathFromRef(this.ref()) + \"\\\": {\\n  \\\"._indexOn\\\": [\" + this._.keys(indexKeys).map(function (key) { return \"\\\"\" + key + \"\\\"\"; }).join(\", \") + \"]\\n}\";\n        console.warn(\"Add this rule to drastically improve performance of your Firebase queries: \\n \" + _indexOnRule);\n    };\n    return Querybase;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Querybase;\n\n},{\"./QuerybaseQuery\":2,\"./QuerybaseUtils\":3}],2:[function(require,module,exports){\n/// <reference path=\"../typings/firebase/firebase.d.ts\" />\nvar QuerybaseQuery = (function () {\n    function QuerybaseQuery(query) {\n        this.query = query;\n    }\n    QuerybaseQuery.prototype.lessThan = function (value) {\n        return new QuerybaseQuery(this.query.endAt(value));\n    };\n    QuerybaseQuery.prototype.greaterThan = function (value) {\n        return this.query.startAt(value);\n    };\n    QuerybaseQuery.prototype.equalTo = function (value) {\n        return this.query.equalTo(value);\n    };\n    return QuerybaseQuery;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = QuerybaseQuery;\n\n},{}],3:[function(require,module,exports){\n/// <reference path=\"../typings/firebase/firebase.d.ts\" />\nvar QuerybaseUtils = (function () {\n    function QuerybaseUtils() {\n    }\n    QuerybaseUtils.prototype.isString = function (value) {\n        return typeof value === 'string' || value instanceof String;\n    };\n    QuerybaseUtils.prototype.hasMultipleCriteria = function (criteriaKeys) {\n        return criteriaKeys.length > 1;\n    };\n    QuerybaseUtils.prototype.createKey = function (propOne, propTwo) {\n        return propOne + \"_\" + propTwo;\n    };\n    QuerybaseUtils.prototype.getPathFromRef = function (ref) {\n        var PATH_POSITION = 3;\n        var pathArray = ref.toString().split('/');\n        return pathArray.slice(PATH_POSITION, pathArray.length).join('/');\n    };\n    QuerybaseUtils.prototype.merge = function (obj1, obj2) {\n        var mergedHash = {};\n        for (var prop in obj1) {\n            mergedHash[prop] = obj1[prop];\n        }\n        for (var prop in obj2) {\n            mergedHash[prop] = obj2[prop];\n        }\n        return mergedHash;\n    };\n    QuerybaseUtils.prototype.keys = function (obj) {\n        return Object.keys(obj);\n    };\n    QuerybaseUtils.prototype.values = function (obj) {\n        return Object.keys(obj).map(function (key) { return obj[key]; });\n    };\n    QuerybaseUtils.prototype.arrayToObject = function (arr) {\n        var hash = {};\n        arr.forEach(function (item) { return hash[item] = item; });\n        return hash;\n    };\n    QuerybaseUtils.prototype.sortLexicographically = function (prop) {\n        return function (a, b) { return a[prop].localeCompare(b[prop]); };\n    };\n    QuerybaseUtils.prototype.stripKeys = function (obj, keyStrip) {\n        if (keyStrip === void 0) { keyStrip = \"_\"; }\n        var copy = Object.create(obj);\n        this.keys(copy).forEach(function (key) { if (key.substr(0, 1) === keyStrip) {\n            delete copy[key];\n        } });\n    };\n    return QuerybaseUtils;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = QuerybaseUtils;\n\n},{}],4:[function(require,module,exports){\nvar Querybase_1 = require('./Querybase');\nvar QuerybaseUtils_1 = require('./QuerybaseUtils');\nvar QuerybaseQuery_1 = require('./QuerybaseQuery');\nwindow[\"Querybase\"] = Querybase_1.default;\nwindow[\"QuerybaseUtils\"] = QuerybaseUtils_1.default;\nwindow[\"QuerybaseQuery\"] = QuerybaseQuery_1.default;\n\n},{\"./Querybase\":1,\"./QuerybaseQuery\":2,\"./QuerybaseUtils\":3}]},{},[4])\n\n","/// <reference path=\"../typings/firebase/firebase.d.ts\" />\n\nexport default class QuerybaseQuery {\n  query: FirebaseQuery;\n  \n  constructor(query: FirebaseQuery) {\n    this.query = query;\n  }\n  \n  lessThan(value: any) {\n    return new QuerybaseQuery(this.query.endAt(value));\n  }\n  \n  greaterThan(value: any) {\n    return this.query.startAt(value);\n  }\n  \n  equalTo(value: any) {\n    return this.query.equalTo(value);\n  }\n  \n}","/// <reference path=\"../typings/firebase/firebase.d.ts\" />\n\nexport default class QuerybaseUtils {\n  \n  isString(value): boolean {\n    return typeof value === 'string' || value instanceof String;\n  }\n  \n  hasMultipleCriteria(criteriaKeys) {\n    return criteriaKeys.length > 1;\n  }\n  \n  createKey(propOne, propTwo) {\n    return `${propOne}_${propTwo}`;\n  }\n  \n  getPathFromRef(ref): string {\n    const PATH_POSITION = 3;\n    var pathArray = ref.toString().split('/');\n    return pathArray.slice(PATH_POSITION, pathArray.length).join('/');\n  }  \n  \n  merge(obj1, obj2) {\n    var mergedHash = {};\n    for (var prop in obj1) { \n      mergedHash[prop] = obj1[prop]; \n    }\n    for (var prop in obj2) { \n      mergedHash[prop] = obj2[prop]; \n    }\n    return mergedHash;\n  }\n  \n  keys(obj) {\n    return Object.keys(obj);\n  }\n  \n  values(obj) {\n    return Object.keys(obj).map(key => { return obj[key]; });\n  }\n  \n  arrayToObject(arr: any[]) {\n    var hash = {};\n    arr.forEach((item) => hash[item] = item);\n    return hash;\n  }\n  \n  sortLexicographically(prop) {\n   return (a,b) => { return a[prop].localeCompare(b[prop]); };\n  }\n  \n  stripKeys(obj, keyStrip = \"_\") {\n    var copy = Object.create(obj);\n    this.keys(copy).forEach((key) => { if (key.substr(0, 1) === keyStrip) { delete copy[key] } });\n  }\n  \n}","import Querybase from './Querybase';\nimport QuerybaseUtils from './QuerybaseUtils';\nimport QuerybaseQuery from './QuerybaseQuery';\n\nwindow[\"Querybase\"] = Querybase;\nwindow[\"QuerybaseUtils\"] = QuerybaseUtils;\nwindow[\"QuerybaseQuery\"] = QuerybaseQuery;\n"],"sourceRoot":"/source/"}